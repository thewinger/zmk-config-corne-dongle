/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 26>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <28 27>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };
    };

    macros {
        ntil: uc_ntil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_tap>,
                <&kp N>;

            label = "UC_NTIL";
        };

        ntild_cap: uc_ntild_cap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_tap>,
                <&kp N>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "UC_NTILD_CAP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_layer {
            bindings = <
&kp TAB           &kp Q              &kp W         &kp F            &kp P            &kp B        &kp J      &kp L             &kp U             &kp Y         &kp SEMI  &kp DELETE
&mt LCTRL ESCAPE  &hml LEFT_SHIFT A  &hml LCTRL R  &hml LEFT_ALT S  &hml LEFT_GUI T  &kp G        &kp M      &hmr RIGHT_GUI N  &hmr RIGHT_ALT E  &hmr RCTRL I  &kp O     &kp APOS
&kp LSHFT         &kp Z              &kp X         &kp C            &kp D            &kp V        &kp K      &kp H             &kp COMMA         &kp DOT       &kp FSLH  &kp RSHFT
                                                   &kp LGUI         &mo 2            &kp ENTER    &kp SPACE  &lt 0 TAB         &kp BSPC
            >;

            label = "COLEMAK";
        };

        qwerty_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q              &kp W         &kp E            &kp R            &kp T        &kp Y      &kp U             &kp I             &kp O         &kp P     &kp DELETE
&mt LCTRL ESCAPE  &hml LEFT_SHIFT A  &hml LCTRL S  &hml LEFT_ALT D  &hml LEFT_GUI F  &kp G        &kp H      &hmr RIGHT_GUI J  &hmr RIGHT_ALT K  &hmr RCTRL L  &kp SEMI  &kp SQT
&kp LSHFT         &kp Z              &kp X         &kp C            &kp V            &kp B        &kp N      &kp M             &kp COMMA         &kp DOT       &kp FSLH  &kp RIGHT_SHIFT
                                                   &kp LGUI         &mo 2            &kp ENTER    &kp SPACE  &lt 0 TAB         &kp BACKSPACE
            >;

            label = "QWERTY";
        };

        num_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans         &kp F1  &kp F2  &kp F3    &kp F4    &kp F5           &kp J    &kp N7        &kp N8        &kp N9        &kp MINUS  &kp KP_DIVIDE
&trans         &trans  &trans  &trans    &kp HOME  &kp PAGE_UP      &trans   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS   &kp KP_ASTERISK
&kp LS(LG(M))  &trans  &trans  &trans    &kp END   &kp PAGE_DOWN    &kp K    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp COMMA  &kp DOT
                               &kp LGUI  &trans    &kp SPACE        &kp RET  &kp N0        &trans
            >;

            label = "NUM";
        };

        symbols_layers {
            bindings = <
&trans  &kp LS(EXCL)   &kp LS(AT)     &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(SPACE)    &kp LS(LA(LEFT))  &kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT))  &kp LS(LA(RIGHT))  &trans             &kp C_PLAY_PAUSE
&trans  &kp LS(POUND)  &trans         &kp LS(LPAR)  &kp LS(RPAR)  &kp SPACE        &kp LEFT          &kp DOWN                &kp UP             &kp RIGHT          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&trans  &kp LS(PRCNT)  &kp LS(SPACE)  &kp LBKT      &kp RBKT      &kp SPACE        &kp N             &trans                  &trans             &trans             &trans             &trans
                                      &trans        &trans        &trans           &trans            &trans                  &trans
            >;

            label = "SYM";
        };

        system_layer {
            bindings = <
&bootloader  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bootloader
&sys_reset   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &sys_reset
&tog 1       &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                             &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "SYS";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SYS {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
